apply plugin: "base"
apply plugin: 'com.android.application'

def versionMajor = 0
def versionMinor = 1
def versionPatch = 0
def versionBuild = 0

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        ndk {
            moduleName "xplatform-lib"
            cFlags "-std=c++11 -frtti -fexceptions -DANDROID -fomit-frame-pointer -fdata-sections -ffunction-sections"
            stl "gnustl_static"
        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java', '../xplatform/generated-srcs/java']
            jni.srcDirs = ['../xplatform/generated-srcs/cpp/', '../xplatform/generated-srcs/jni/', '../xplatform/djinni/support-lib/jni/', '../xplatform/src']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    aaptOptions {
        noCompress 'txt'
        ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }
    lintOptions {
        quiet true
        checkReleaseBuilds false
        abortOnError false
    }
    packagingOptions {
        exclude 'asm-license.txt'
        exclude 'LICENSE'
        exclude 'LICENSE.txt'
        exclude 'NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    splits {
        abi {
            enable true
            reset()
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a' //select ABIs to build APKs for
            universalApk true //generate an additional APK that contains all the ABIs
        }
    }

    // map for the version code
    project.ext.versionCodes = ['armeabi': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3, 'mips': 5, 'mips64': 6, 'x86': 8, 'x86_64': 9]

    android.applicationVariants.all { variant ->
        // assign different version code for each output
        variant.outputs.each { output ->
            output.versionCodeOverride =
                    project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 1000000 + android.defaultConfig.versionCode
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile rootProject.ext.libraries.appCompat
    compile rootProject.ext.libraries.androidSupportv7
    compile rootProject.ext.libraries.butterknife
}

task djinniClean(type: Exec) {

    def common = new File(project.rootDir, "xplatform")
    if (!common.exists()) {
        throw new RuntimeException("Unable to find xplatform dir for 'make clean'")
    } else {
        workingDir = common
    }
    commandLine "make", "clean"
}

task djinniMake(type: Exec) {

    def common = new File(project.rootDir, "xplatform")
    if (!common.exists()) {
        throw new RuntimeException("Unable to find common dir for 'make build'")
    } else {
        workingDir = common
    }
    commandLine "make", "build"
}

//Wire up the tasks
clean.dependsOn(djinniClean)
tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn djinniMake
}